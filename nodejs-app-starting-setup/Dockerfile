# node라는 존재하는 이미지를 찾기
FROM node

# 기본 작업 디렉토리는 root이기 때문에 작업 디렉토리를 /app으로 변경
# root에서 작업하는 건 지양한다
WORKDIR /app

# 첫 번째 경로는 컨테이너의 외부에서 이미지로 복사되어야 할 파일의 경로
# 두 번째 경로는 이미지의 내부에서 그 파일을 저장해야 하는 경로(WORKDIR 경로 기준)
# 즉 이 프로젝트의 모든 파일을 복사해서 working directory에 저장하게 된다
COPY . /app
# COPY . /. -> 이렇게 작성해도 동일하게 작동하지만 가독성이 떨어지므로 명확히 작성하는 것을 추천

# npm install 명령어 실행
RUN npm install

# 도커 컨테이너는 완벽히 격리되어 있는 환경이므로 외부에서 컨테이너 내부로 접근할 수 없다
# 그러므로 컨테이너 내부의 80포트를 외부로 연결해야 상호작용이 가능하다

# 단, 이 EXPOSE 라인은 실질적으로 컨테이너 실행에 관여하지 않는다!
# docker run -p <외부포트>:<내부포트> <도커 이미지 ID>명령이 실제로 포트를 노출하며, 이 라인과는 관계가 없다
# 그럼에도 명시하는 이유는 문서화를 위해서 권장되기 때문이다
EXPOSE 80

# RUN node server.js -> 이 경우 이미지가 생성될 때 이미지 자체를 실행하게 되는 잘못된 방식
# 이미지는 템플릿일 뿐이므로 이미지를 기반으로 컨테이너(인스턴스)를 생성한 뒤 실행해야 한다

# CMD 명령은 RUN과 달리 이미지가 생성될 때 실행되지 않고
# 이 이미지를 기반으로 컨테이너가 생성될 때마다 실행된다
# CMD는 명령을 두 개의 문자열로 분할해서 배열로 받는다
# CMD가 없을 경우 베이스 이미지가 실행되며, 없는 경우 에러가 발생한다
CMD [ "node", "server.js" ]

